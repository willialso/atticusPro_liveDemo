"""
ATTICUS PROFESSIONAL - LIVE PRICING & EXECUTABLE STRATEGIES
‚úÖ Real-time BTC pricing from multiple exchanges
‚úÖ Detailed options contract specifications
‚úÖ Professional institutional presentation
"""
import streamlit as st
import requests
import time
import random
from datetime import datetime, timedelta
import json

# Initialize session state FIRST
def initialize_session_state():
    defaults = {
        'demo_step': 1,
        'portfolio': None,
        'strategies': None,
        'selected_strategy': None,
        'execution_data': None,
        'custom_positions': [],
        'portfolio_source': None,
        'current_page': 'portfolio'  # NEW: Track current page
    }
    
    for key, default_value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = default_value

initialize_session_state()

# Page config
st.set_page_config(
    page_title="Atticus Professional",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# LIVE PRICING FUNCTIONS
@st.cache_data(ttl=30)  # Cache for 30 seconds
def get_live_btc_price():
    """Get LIVE BTC price from multiple exchanges"""
    try:
        # Primary: Coinbase Pro API
        response = requests.get("https://api.coinbase.com/v2/exchange-rates?currency=BTC", timeout=10)
        if response.status_code == 200:
            data = response.json()
            return float(data['data']['rates']['USD'])
    except:
        pass
    
    try:
        # Fallback: CoinGecko API
        response = requests.get("https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd", timeout=10)
        if response.status_code == 200:
            data = response.json()
            return float(data['bitcoin']['usd'])
    except:
        pass
    
    # Emergency fallback only
    return 121425

@st.cache_data(ttl=300)  # Cache for 5 minutes
def get_options_market_data(current_price, days_to_expiry):
    """Get realistic options pricing based on current market conditions"""
    # Simulate live options pricing based on current BTC price and volatility
    # In production, this would connect to Deribit, OKX, or institutional options providers
    
    atm_volatility = 0.65  # 65% implied volatility (realistic for BTC)
    time_to_expiry = days_to_expiry / 365.0
    
    # Black-Scholes approximation for demo (simplified)
    volatility_factor = atm_volatility * (time_to_expiry ** 0.5)
    
    return {
        'atm_put_premium': current_price * volatility_factor * 0.08,
        'otm_put_premium': current_price * volatility_factor * 0.055,
        'atm_call_premium': current_price * volatility_factor * 0.082,
        'implied_volatility': atm_volatility,
        'bid_ask_spread': current_price * 0.001  # 0.1% spread
    }

def calculate_options_contracts(btc_exposure, current_price):
    """Calculate exact number of options contracts needed"""
    # Standard BTC options are typically 1 BTC per contract
    contracts_needed = int(btc_exposure)
    fractional_btc = btc_exposure - contracts_needed
    
    return {
        'full_contracts': contracts_needed,
        'fractional_btc': fractional_btc,
        'total_notional': btc_exposure * current_price,
        'contract_size': 1.0  # 1 BTC per contract standard
    }

def generate_live_strategies(net_btc, current_price):
    """Generate strategies with LIVE market pricing"""
    options_data = get_options_market_data(current_price, 7)
    contracts_info = calculate_options_contracts(abs(net_btc), current_price)
    
    # Calculate expiry date
    expiry_date = datetime.now() + timedelta(days=7)
    expiry_str = expiry_date.strftime("%Y-%m-%d")
    
    strategies = [
        {
            'strategy_name': 'protective_put',
            'target_exposure': abs(net_btc),
            'priority': 'high',
            'rationale': f'Institutional-grade downside protection for {abs(net_btc):.1f} BTC long exposure',
            'contracts': contracts_info,
            'pricing': {
                'live_pricing': {
                    'btc_spot_price': current_price,
                    'contracts_needed': contracts_info['full_contracts'],
                    'strike_price': current_price * 0.95,  # 5% OTM put
                    'premium_per_contract': options_data['otm_put_premium'],
                    'total_premium': contracts_info['full_contracts'] * options_data['otm_put_premium'],
                    'implied_volatility': options_data['implied_volatility'],
                    'days_to_expiry': 7,
                    'expiry_date': expiry_str,
                    'option_type': 'European Put Options',
                    'exchange': 'Institutional OTC / Deribit',
                    'cost_as_pct': (contracts_info['full_contracts'] * options_data['otm_put_premium']) / (abs(net_btc) * current_price) * 100
                }
            }
        },
        {
            'strategy_name': 'put_spread',
            'target_exposure': abs(net_btc),
            'priority': 'medium', 
            'rationale': f'Cost-efficient protection via put spread for {abs(net_btc):.1f} BTC exposure',
            'contracts': contracts_info,
            'pricing': {
                'live_pricing': {
                    'btc_spot_price': current_price,
                    'contracts_needed': contracts_info['full_contracts'],
                    'long_strike': current_price * 0.95,  # Buy 95% strike
                    'short_strike': current_price * 0.85,  # Sell 85% strike  
                    'long_premium': options_data['otm_put_premium'],
                    'short_premium': options_data['otm_put_premium'] * 0.4,
                    'net_premium': contracts_info['full_contracts'] * (options_data['otm_put_premium'] - options_data['otm_put_premium'] * 0.4),
                    'total_premium': contracts_info['full_contracts'] * (options_data['otm_put_premium'] - options_data['otm_put_premium'] * 0.4),
                    'implied_volatility': options_data['implied_volatility'],
                    'days_to_expiry': 14,
                    'expiry_date': (datetime.now() + timedelta(days=14)).strftime("%Y-%m-%d"),
                    'option_type': 'Put Spread (Buy 95% / Sell 85%)',
                    'exchange': 'Institutional OTC / Deribit',
                    'cost_as_pct': (contracts_info['full_contracts'] * (options_data['otm_put_premium'] - options_data['otm_put_premium'] * 0.4)) / (abs(net_btc) * current_price) * 100
                }
            }
        },
        {
            'strategy_name': 'collar_strategy',
            'target_exposure': abs(net_btc),
            'priority': 'low',
            'rationale': f'Income-generating collar strategy for {abs(net_btc):.1f} BTC with downside protection',
            'contracts': contracts_info,
            'pricing': {
                'live_pricing': {
                    'btc_spot_price': current_price,
                    'contracts_needed': contracts_info['full_contracts'],
                    'put_strike': current_price * 0.90,  # Buy 90% put
                    'call_strike': current_price * 1.15,  # Sell 115% call
                    'put_premium_paid': options_data['otm_put_premium'] * 0.6,
                    'call_premium_received': options_data['atm_call_premium'] * 0.7,
                    'net_cost': contracts_info['full_contracts'] * (options_data['otm_put_premium'] * 0.6 - options_data['atm_call_premium'] * 0.7),
                    'total_premium': contracts_info['full_contracts'] * (options_data['otm_put_premium'] * 0.6 - options_data['atm_call_premium'] * 0.7),
                    'implied_volatility': options_data['implied_volatility'],
                    'days_to_expiry': 30,
                    'expiry_date': (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%d"),
                    'option_type': 'Collar (Buy 90% Put / Sell 115% Call)',
                    'exchange': 'Institutional OTC / Deribit',
                    'cost_as_pct': abs(contracts_info['full_contracts'] * (options_data['otm_put_premium'] * 0.6 - options_data['atm_call_premium'] * 0.7)) / (abs(net_btc) * current_price) * 100
                }
            }
        }
    ]
    
    return strategies

# CSS
st.markdown("""
<style>
    .stApp {
        background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
        color: #f1f5f9 !important;
    }
    
    .top-disclaimer {
        background: linear-gradient(135deg, #1e293b 0%, #475569 100%);
        border-bottom: 2px solid #fbbf24;
        padding: 0.8rem 2rem;
        margin: 0;
        width: 100%;
        position: fixed;
        top: 0;
        left: 0;
        z-index: 1000;
        text-align: center;
    }
    
    .top-disclaimer p {
        color: #fbbf24 !important;
        font-size: 0.95rem;
        margin: 0;
        line-height: 1.3;
        font-weight: 500;
    }
    
    .main .block-container {
        padding-top: 4rem !important;
    }
    
    .main-header {
        text-align: center;
        margin: 2rem 0 3rem 0;
        padding: 1rem;
    }
    
    .atticus-card {
        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
        border: 1px solid #475569;
        border-radius: 12px;
        padding: 2rem;
        margin: 1rem 0;
        box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
    }
    
    .atticus-card h4 {
        color: #fbbf24 !important;
        font-size: 1.5rem;
        margin-bottom: 1rem;
        text-align: center;
    }
    
    .strategy-card {
        background: linear-gradient(135deg, #1e293b 0%, #334155 100%);
        border: 2px solid #fbbf24;
        border-radius: 12px;
        padding: 2rem;
        margin: 1.5rem 0;
    }
    
    .execution-success {
        background: linear-gradient(135deg, #059669 0%, #10b981 100%);
        padding: 2rem;
        border-radius: 12px;
        color: white;
        text-align: center;
        margin: 2rem 0;
    }
    
    .live-price-badge {
        background: #10b981;
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 600;
        display: inline-block;
        margin: 0.5rem;
    }
    
    .options-detail-box {
        background: #0f172a;
        border: 2px solid #10b981;
        border-radius: 12px;
        padding: 1.5rem;
        margin: 1rem 0;
    }
    
    .options-detail-box h5 {
        color: #10b981 !important;
        font-size: 1.3rem;
        margin-bottom: 1rem;
    }
    
    .options-detail-box p {
        color: #f8fafc !important;
        font-size: 1rem;
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }
    
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

def show_top_disclaimer():
    st.markdown("""
    <div class="top-disclaimer">
        <p><strong>Live Demo Platform</strong> ‚Ä¢ Real-time BTC pricing ‚Ä¢ Institutional-grade options strategies ‚Ä¢ All premiums based on live market data</p>
    </div>
    """, unsafe_allow_html=True)

def show_header():
    st.markdown("""
    <div class="main-header">
        <img src="https://i.ibb.co/qFNCZsWG/attpro.png" width="400" alt="Atticus Professional">
        <p style="color: #e2e8f0; font-size: 1.2rem; text-align: center; margin-top: 1rem;">Professional Options Strategies for Institutional Portfolios</p>
    </div>
    """, unsafe_allow_html=True)
    st.markdown("---")

def screen_1_portfolio():
    show_top_disclaimer()
    show_header()
    
    # Set current page
    st.session_state.current_page = 'portfolio'
    
    # Get LIVE BTC price
    live_btc_price = get_live_btc_price()
    
    st.markdown(f"""
    <div class="live-price-badge">
        üî¥ LIVE: BTC ${live_btc_price:,.2f}
    </div>
    """, unsafe_allow_html=True)
    
    col_left, col_right = st.columns(2)
    
    with col_left:
        st.markdown("""
        <div class="atticus-card">
            <h4>üìä Connect Institution for BTC Portfolio Options</h4>
        </div>
        """, unsafe_allow_html=True)
        
        fund_type = st.radio(
            "Institution Type:",
            ["Small Crypto Fund ($20-50M AUM)", "Mid-Cap Fund ($50-200M AUM)"],
            horizontal=True
        )
        
        if st.button("üéØ Generate Institutional Portfolio", type="primary", use_container_width=True):
            with st.spinner("Generating institutional portfolio with live pricing..."):
                if "Small" in fund_type:
                    portfolio = {
                        'aum': 38000000,
                        'total_btc_size': 162.4,
                        'net_btc_exposure': 162.4,
                        'total_current_value': 162.4 * live_btc_price,
                        'total_pnl': 1700000,
                        'current_btc_price': live_btc_price
                    }
                else:
                    portfolio = {
                        'aum': 128000000,
                        'total_btc_size': 425.7,
                        'net_btc_exposure': 425.7,
                        'total_current_value': 425.7 * live_btc_price,
                        'total_pnl': 3200000,
                        'current_btc_price': live_btc_price
                    }
                
                st.session_state.portfolio = portfolio
                st.session_state.portfolio_source = 'generated'
                st.session_state.strategies = None
                st.success(f"‚úÖ Portfolio Generated | Live BTC: ${live_btc_price:,.2f}")
                st.rerun()
        
        if st.session_state.portfolio and st.session_state.portfolio_source == 'generated':
            portfolio = st.session_state.portfolio
            
            col1, col2 = st.columns(2)
            with col1:
                st.metric("Total AUM", f"${portfolio['aum']:,.0f}")
                st.metric("BTC Exposure", f"{portfolio['total_btc_size']:.1f} BTC")
            with col2:
                st.metric("Position Value", f"${portfolio['total_current_value']:,.0f}")
                st.metric("Current P&L", f"${portfolio['total_pnl']:,.0f}")
            
            if st.button("üìä Analyze Generated Portfolio", type="primary", use_container_width=True):
                st.session_state.demo_step = 2
                st.rerun()
    
    with col_right:
        st.markdown("""
        <div class="atticus-card">
            <h4>‚ö° Enter BTC Position for Options Strategy</h4>
        </div>
        """, unsafe_allow_html=True)
        
        with st.form("position_entry"):
            col1, col2, col3 = st.columns([2, 1, 1])
            
            with col1:
                btc_amount = st.number_input("BTC Amount", min_value=0.1, value=50.0, step=0.1)
            with col2:
                position_type = st.radio("Position", ["Long", "Short"], horizontal=True)
            with col3:
                st.write("")
                add_position = st.form_submit_button("Add Position", type="primary")
        
        if add_position and btc_amount > 0:
            st.session_state.custom_positions.append({'btc_amount': btc_amount, 'position_type': position_type})
            st.rerun()
        
        if st.session_state.custom_positions:
            st.markdown("**üìã Current Positions**")
            
            total_long = sum(pos['btc_amount'] for pos in st.session_state.custom_positions if pos['position_type'] == 'Long')
            total_short = sum(pos['btc_amount'] for pos in st.session_state.custom_positions if pos['position_type'] == 'Short')
            
            for i, pos in enumerate(st.session_state.custom_positions):
                col1, col2, col3 = st.columns([2, 1, 1])
                with col1:
                    st.write(f"**{pos['btc_amount']:.1f} BTC**")
                with col2:
                    color = "üü¢" if pos['position_type'] == 'Long' else "üî¥"
                    st.write(f"{color} {pos['position_type']}")
                with col3:
                    if st.button("Remove", key=f"remove_{i}"):
                        st.session_state.custom_positions.pop(i)
                        st.rerun()
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Long BTC", f"{total_long:.1f}")
            with col2:
                st.metric("Short BTC", f"{total_short:.1f}")
            with col3:
                st.metric("Net BTC", f"{total_long - total_short:+.1f}")
            
            if st.button("‚ö° Analyze Custom Positions", type="primary", use_container_width=True):
                net_btc = total_long - total_short
                custom_portfolio = {
                    'aum': abs(net_btc) * live_btc_price * 2,
                    'total_btc_size': abs(net_btc),
                    'net_btc_exposure': net_btc,
                    'total_current_value': (total_long + total_short) * live_btc_price,
                    'total_pnl': abs(net_btc) * live_btc_price * 0.08,
                    'current_btc_price': live_btc_price
                }
                st.session_state.portfolio = custom_portfolio
                st.session_state.portfolio_source = 'custom'
                st.session_state.strategies = None
                st.session_state.demo_step = 2
                st.rerun()

def screen_2_strategies():
    show_top_disclaimer()
    show_header()
    
    # FIXED: Only proceed if we're actually on strategies page
    if st.session_state.current_page != 'strategies' and st.session_state.demo_step == 2:
        st.session_state.current_page = 'strategies'
        st.session_state.selected_strategy = None  # Clear any selected strategy
    
    if not st.session_state.portfolio:
        st.error("Please create a portfolio first")
        return
    
    portfolio = st.session_state.portfolio
    net_btc = portfolio.get('net_btc_exposure', 0)
    current_price = portfolio.get('current_btc_price', get_live_btc_price())
    
    st.info(f"üìä Analyzing Portfolio | {abs(net_btc):.1f} BTC | üî¥ LIVE: ${current_price:,.2f}")
    st.markdown(f"### Live Options Strategies for {abs(net_btc):.1f} BTC Position")
    
    # Generate strategies with live pricing
    if not st.session_state.strategies:
        with st.spinner("Generating live strategies with institutional pricing... (Est. 45 seconds)"):
            time.sleep(3)
            st.session_state.strategies = generate_live_strategies(net_btc, current_price)
    
    # FIXED: Only show strategies if on strategies page and no strategy selected
    if (st.session_state.strategies and 
        st.session_state.current_page == 'strategies' and 
        not st.session_state.selected_strategy):
        
        for i, strategy in enumerate(st.session_state.strategies):
            priority_emoji = "üî•" if strategy['priority'] == 'high' else "‚≠ê" if strategy['priority'] == 'medium' else "üí°"
            
            st.markdown(f"""
            <div class="strategy-card">
                <h4>{priority_emoji} {strategy['strategy_name'].replace('_', ' ').title()}</h4>
                <p><strong>Coverage:</strong> {strategy['target_exposure']:.1f} BTC</p>
                <p><strong>Purpose:</strong> {strategy['rationale']}</p>
            </div>
            """, unsafe_allow_html=True)
            
            pricing = strategy['pricing']['live_pricing']
            
            col1, col2, col3, col4 = st.columns(4)
            with col1:
                cost_display = f"${abs(pricing['total_premium']):,.0f}"
                if pricing['total_premium'] < 0:
                    st.success(f"**Income**\n{cost_display}")
                else:
                    st.info(f"**Cost**\n{cost_display}")
            with col2:
                cost_pct = pricing['cost_as_pct']
                color = "üü¢" if cost_pct < 2 else "üü°" if cost_pct < 4 else "üî¥"
                st.info(f"**Rate**\n{color} {cost_pct:.1f}%")
            with col3:
                st.info(f"**Duration**\n{pricing['days_to_expiry']} days")
            with col4:
                if st.button("Select Strategy", key=f"select_strat_{i}", type="primary"):
                    st.session_state.selected_strategy = strategy
                    st.session_state.execution_data = {
                        'btc_price_at_execution': current_price,
                        'execution_time': random.randint(15, 35),
                        'timestamp': datetime.now().isoformat()
                    }
                    st.session_state.current_page = 'execution'
                    st.session_state.demo_step = 3
                    st.rerun()
            
            st.markdown("---")
    
    if st.button("‚Üê Back to Portfolio", type="secondary"):
        st.session_state.demo_step = 1
        st.session_state.current_page = 'portfolio'
        st.session_state.strategies = None
        st.session_state.selected_strategy = None
        st.rerun()

def screen_3_execution():
    show_top_disclaimer()
    show_header()
    
    st.session_state.current_page = 'execution'
    
    if not st.session_state.selected_strategy:
        st.error("Please select a strategy first")
        return
    
    strategy = st.session_state.selected_strategy
    execution_data = st.session_state.execution_data
    pricing = strategy['pricing']['live_pricing']
    
    st.markdown("### Strategy Execution")
    
    with st.spinner("Executing strategy with live institutional pricing..."):
        time.sleep(2)
    
    st.success("‚úÖ STRATEGY EXECUTED SUCCESSFULLY")
    st.metric("Execution Time", f"{execution_data['execution_time']} seconds")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown(f"""
        <div class="options-detail-box">
            <h5>üìã Options Contract Details</h5>
            <p><strong>Contracts Purchased:</strong> {pricing['contracts_needed']} √ó {pricing['option_type']}</p>
            <p><strong>Strike Price:</strong> ${pricing.get('strike_price', pricing.get('long_strike', 0)):,.2f}</p>
            <p><strong>Expiry Date:</strong> {pricing['expiry_date']}</p>
            <p><strong>Premium per Contract:</strong> ${pricing.get('premium_per_contract', abs(pricing['total_premium'])/pricing['contracts_needed']):,.2f}</p>
            <p><strong>Total Premium:</strong> ${abs(pricing['total_premium']):,.2f}</p>
            <p><strong>Implied Volatility:</strong> {pricing['implied_volatility']*100:.1f}%</p>
            <p><strong>Exchange:</strong> {pricing['exchange']}</p>
        </div>
        """, unsafe_allow_html=True)
    
    with col2:
        # Calculate breakeven
        if 'strike_price' in pricing:
            strike = pricing['strike_price']
            premium_per_btc = abs(pricing['total_premium']) / strategy['target_exposure']
            breakeven = strike - premium_per_btc if pricing['total_premium'] > 0 else strike + premium_per_btc
        else:
            breakeven = pricing['btc_spot_price']
        
        max_loss = abs(pricing['total_premium'])
        protection_level = pricing.get('strike_price', pricing.get('put_strike', pricing['btc_spot_price'] * 0.95))
        
        st.markdown(f"""
        <div class="options-detail-box">
            <h5>üõ°Ô∏è Protection Analysis</h5>
            <p><strong>Position Protected:</strong> {strategy['target_exposure']:.1f} BTC</p>
            <p><strong>Entry BTC Price:</strong> ${pricing['btc_spot_price']:,.2f}</p>
            <p><strong>Protection Level:</strong> ${protection_level:,.2f}</p>
            <p><strong>Breakeven Price:</strong> ${breakeven:,.2f}</p>
            <p><strong>Maximum Loss:</strong> ${max_loss:,.2f}</p>
            <p><strong>Maximum Profit:</strong> Unlimited</p>
            <p><strong>Cost as % of Position:</strong> {pricing['cost_as_pct']:.2f}%</p>
        </div>
        """, unsafe_allow_html=True)
    
    st.markdown("""
    <div class="execution-success">
        <h3>‚úÖ INSTITUTIONAL STRATEGY EXECUTED</h3>
        <p>Professional options contracts purchased with live market pricing ‚Ä¢ Ready for immediate hedging</p>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ New Analysis", type="primary", use_container_width=True):
            # Complete reset
            st.session_state.portfolio = None
            st.session_state.strategies = None
            st.session_state.selected_strategy = None
            st.session_state.execution_data = None
            st.session_state.custom_positions = []
            st.session_state.current_page = 'portfolio'
            st.session_state.demo_step = 1
            st.rerun()
    
    with col2:
        st.link_button("üí¨ Contact via Telegram", "https://t.me/willialso", use_container_width=True)

def main():
    if st.session_state.demo_step == 1:
        screen_1_portfolio()
    elif st.session_state.demo_step == 2:
        screen_2_strategies()
    elif st.session_state.demo_step == 3:
        screen_3_execution()

if __name__ == "__main__":
    main()
